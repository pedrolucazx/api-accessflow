type User {
  id: Int
  nome: String!
  email: String!
  ativo: Boolean!
  data_criacao: String!
  data_update: String!
  perfis: [Profile]
}

type AuthenticatedUser {
  id: Int!
  nome: String!
  email: String!
  ativo: Boolean!
  token: String!
  perfis: [Profile]!
}

input UserInput {
  nome: String!
  email: String!
  senha: String!
  perfis: [ProfileFilterInput]
}

input UserUpdateInput {
  nome: String
  email: String
  senha: String
  perfis: [ProfileFilterInput]
}

input SignUpInput {
  nome: String!
  email: String!
  senha: String!
}

input LoginInput {
  email: String!
  senha: String!
}

input UserFilter {
  id: Int
  nome: String
  email: String
}

type Metrics {
  totalUsers: Int!
  activeUsers: Int!
  inactiveUsers: Int!
  totalProfiles: Int!
}

type Query {
  getAllUsers: [User]
  getMetrics: Metrics
  getUserByParams(filter: UserFilter!): User
  login(input: LoginInput): AuthenticatedUser
}

type Mutation {
  deleteUser(id: Int!): String!
  createUser(input: UserInput): User!
  updateUser(input: UserUpdateInput!, id: Int!): User
  signUp(input: SignUpInput): User
}
